%% -------------------------------------------------------------------
%%
%% Copyright (c) 2018 Carlos Gonzalez Florido.  All Rights Reserved.
%%
%% This file is provided to you under the Apache License,
%% Version 2.0 (the "License"); you may not use this file
%% except in compliance with the License.  You may obtain
%% a copy of the License at
%%
%%   http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing,
%% software distributed under the License is distributed on an
%% "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
%% KIND, either express or implied.  See the License for the
%% specific language governing permissions and limitations
%% under the License.
%%
%% -------------------------------------------------------------------

%% @doc NetComposer Standard Library
-module(nklib_date).
-author('Carlos Gonzalez <carlosj.gf@gmail.com>').
-export([epoch/1]).
-export([to_3339/1, to_epoch/2, quick_3339/1, quick_epoch/2]).
-export_type([epoch_unit/0, epoch/1]).

-type epoch_unit() :: secs | msecs | usecs.
-type epoch(_Unit) :: pos_integer().

-include("nklib.hrl").


%% ===================================================================
%% Public
%% ===================================================================


%% @doc
epoch(secs) ->
    epoch(usecs) div 1000000;

epoch(msecs) ->
    epoch(usecs) div 1000;

epoch(usecs) ->
    {N1, N2, N3} = os:timestamp(),
    (N1 * 1000000 + N2) * 1000000 + N3.


%% @doc Normalizes any incoming value (see tests)
to_3339(Val) when is_integer(Val) ->
    Precision = case byte_size(integer_to_binary(abs(Val))) of
        Size when Size =< 10 ->
            0;
        Size when Size >= 11, Size =< 13 ->
            3;
        _ ->
            6
    end,
    D = jam:from_epoch(Val, Precision),
    {ok, list_to_binary(jam_iso8601:to_string(D))};

to_3339(Val) when is_binary(Val); is_list(Val) ->
    case parse_8601(Val) of
        error ->
            error;
        DateTime ->
            {ok, list_to_binary(jam_iso8601:to_string(DateTime))}
    end.


%% @doc Converts any value to epoch
to_epoch(Val, Precision) ->
    Precision2 = case Precision of
        secs -> 0;
        0 -> 0;
        msecs -> 3;
        3 -> 3;
        usecs -> 6;
        6 -> 6
    end,
    case parse_8601(Val) of
        error ->
            error;
        DateTime ->
            {ok, jam:to_epoch(DateTime, Precision2)}
    end.


%% @doc Quick 3339 parser (only for Z timezone)
%% Can return invalid dates
quick_3339(Val) ->
    case to_bin(Val) of
        <<
            Y1, Y2, Y3, Y4, $- , M1, M2, $-, D1, D2, $T,
            H1, H2, $:, Mi1, Mi2, $:, S1, S2, Rest/binary
        >> when
            Y1>=$0, Y1=<$9, Y2>=$0, Y2=<$9, Y3>=$0, Y3=<$9, Y4>=$0, Y4=<$9,
            M1>=$0, M1=<$9, M2>=$0, M2=<$9, D1>=$0, D1=<$9, D2>=$0, D2=<$9,
            H1>=$0, H1=<$9, H2>=$0, H2=<$9, Mi1>=$0, Mi1=<$9, Mi2>=$0, Mi2=<$9,
            S1>=$0, S1=<$9, S2>=$0, S2=<$9 ->
            Y = (Y1-$0)*1000 + (Y2-$0)*100 + (Y3-$0)*10 + (Y4-$0),
            M = (M1-$0)*10 + (M2-$0),
            D = (D1-$0)*10 + (D2-$0),
            H = (H1-$0)*10 + (H2-$0),
            Mi = (Mi1-$0)*10 + (Mi2-$0),
            S = (S1-$0)*10 + (S2-$0),
            case binary:split(Rest, <<"Z">>) of
                [<<>>, <<>>] ->
                    {ok, {Y, M, D, H, Mi, S, 0.0, 0}};
                [<<$., Dec/binary>>, <<>>] ->
                    case catch binary_to_float(<<"0.", Dec/binary>>) of
                        {'EXIT', _} ->
                            error;
                        Dec2 ->
                            Precision = byte_size(Dec),
                            {ok, {Y, M, D, H, Mi, S, Dec2, Precision}}
                    end;
                _ ->
                    error
            end;
        _ ->
            error
    end.



%% @doc Quick 3339 to epoch, only for standard values
quick_epoch(Val, Precision) ->
    Precision2 = case Precision of
        secs -> 0;
        0 -> 0;
        msecs -> 3;
        3 -> 3;
        usecs -> 6;
        6 -> 6
    end,
    case quick_3339(Val) of
        {ok, {Y, M, D, H, Mi, S, 0.0, 0}} ->
            Date = {datetime,
                {date, Y,M,D},
                {time,H,Mi,S,undefined,{timezone,"Z",0,0}}
            },
            {ok, jam:to_epoch(Date, Precision2)};
        {ok, {Y, M, D, H, Mi, S, Dec, P}} ->
            Date = {datetime, {date, Y,M,D}, {time,H,Mi,S,{fraction,Dec, P},
                {timezone,"Z",0,0}}},
            {ok, jam:to_epoch(Date, Precision2)};
        error ->
            error
    end.


%% @private
parse_8601(Val) ->
    case catch jam_iso8601:parse(re_cache(), Val) of
        undefined ->
            error;
        {'EXIT, _'} ->
            error;
        Parsed ->
            case jam:normalize(jam:compile(Parsed)) of
                {datetime, Date, Time} ->
                    {datetime, norm_date(Date), norm_time(Time)};
                {date, _, _, _} = Date ->
                    {datetime, norm_date(Date), {time,0,0,0,undefined,undefined}};
                {time, _, _, _, _, _} ->
                    error
            end
    end.


%% @private
norm_date({date, Year, undefined, undefined}) -> {date, Year, 1, 1};
norm_date({date, Year, Month, undefined}) -> {date, Year, Month, 1};
norm_date({date, Year, Month, Day}) -> {date, Year, Month, Day}.


%% @private
norm_time({time, Hour, undefined, undefined, Dec, Tz}) ->
    {time, Hour, 0, 0, Dec, norm_tz(Tz)};
norm_time({time, Hour, Min, undefined, Dec, Tz}) ->
    {time, Hour, Min, 0, Dec, norm_tz(Tz)};
norm_time({time, Hour, Min, Sec, Dec, Tz}) ->
    {time, Hour, Min, Sec, Dec, norm_tz(Tz)}.


%% @private
norm_tz(undefined) -> {timezone, "Z", 0, 0};
norm_tz({timezone, TZ, H, M}) -> {timezone, TZ, H, M}.



%% Generated from jam_iso8601:init().
re_cache() ->
    [{time,
{re_pattern,14,0,0,
<<69,82,67,80,158,1,0,0,16,0,0,0,1,0,0,0,255,255,255,
255,255,255,255,255,0,0,0,0,0,0,14,0,3,0,64,0,13,0,8,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
9,70,82,65,67,84,73,79,78,65,76,0,0,1,72,79,85,82,0,
73,79,78,65,76,0,0,4,77,73,78,85,84,69,0,78,65,76,0,
0,6,83,69,67,79,78,68,0,78,65,76,0,0,3,84,83,69,80,0,
73,79,78,65,76,0,0,10,84,90,0,84,72,0,79,78,65,76,0,
0,12,84,90,72,0,78,68,0,78,65,76,0,0,14,84,90,77,0,0,
73,79,78,65,76,0,131,0,228,27,94,9,44,84,133,0,9,0,1,
93,0,2,7,120,0,9,146,133,0,27,0,2,133,0,7,0,3,44,58,
120,0,7,133,0,9,0,4,93,0,2,7,120,0,9,120,0,27,146,
133,0,20,0,5,113,0,3,133,0,9,0,6,93,0,2,7,120,0,9,
120,0,20,146,133,0,56,0,7,133,0,38,0,8,110,0,0,0,0,0,
80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,120,0,38,133,0,7,0,9,95,7,120,0,7,120,0,56,146,133,
0,86,0,10,133,0,7,0,11,29,90,119,0,71,133,0,42,0,12,
110,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,93,0,2,7,120,0,42,146,133,0,19,0,13,
44,58,133,0,9,0,14,93,0,2,7,120,0,9,120,0,19,120,0,
78,120,0,86,85,9,25,120,0,228,0,133,0,38,0,14,110,0,
0,0,0,0,80,0,0>>}},
{ordinal_date,
{re_pattern,3,0,0,
<<69,82,67,80,132,0,0,0,16,0,0,0,1,0,0,0,255,255,255,
255,255,255,255,255,0,0,0,0,0,0,3,0,0,0,64,0,7,0,3,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
68,65,89,0,0,0,2,68,83,69,80,0,0,1,89,69,65,82,0,131,
0,43,27,94,9,133,0,9,0,1,93,0,4,7,120,0,9,133,0,7,0,
2,44,45,120,0,7,133,0,9,0,3,93,0,3,7,120,0,9,85,9,25,
120,0,43,0>>}},
{calendar_date,
{re_pattern,6,0,0,
<<69,82,67,80,190,0,0,0,16,0,0,0,1,0,0,0,255,255,255,
255,255,255,255,255,0,0,0,0,0,0,6,0,3,0,64,0,8,0,4,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,
68,65,89,0,0,0,0,3,68,83,69,80,0,0,0,4,77,79,78,84,
72,0,0,1,89,69,65,82,0,0,131,0,76,27,94,9,133,0,9,0,
1,93,0,4,7,120,0,9,146,133,0,27,0,2,133,0,7,0,3,44,
45,120,0,7,133,0,9,0,4,93,0,2,7,120,0,9,120,0,27,146,
133,0,20,0,5,113,0,3,133,0,9,0,6,93,0,2,7,120,0,9,
120,0,20,85,9,25,120,0,76,0,0,0,0,0,112,0,0,0,0,0,0,
0,0,0>>}},
{week_date,
{re_pattern,7,0,0,
<<69,82,67,80,192,0,0,0,16,0,0,0,65,0,0,0,255,255,255,
255,255,255,255,255,0,0,87,0,0,0,7,0,3,0,64,0,7,0,4,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
7,68,65,89,0,0,0,3,68,83,69,80,0,0,5,87,69,69,75,0,0,
1,89,69,65,82,0,131,0,82,27,94,9,133,0,9,0,1,93,0,4,
7,120,0,9,133,0,37,0,2,133,0,7,0,3,44,45,120,0,7,133,
0,19,0,4,29,87,133,0,9,0,5,93,0,2,7,120,0,9,120,0,19,
120,0,37,146,133,0,17,0,6,113,0,3,133,0,6,0,7,7,120,
0,6,120,0,17,85,9,25,120,0,82,0,0,0,112,0,0,0,0,0,0,
0,0,0,0,0>>}},
{ordinal_datetime,
{re_pattern,17,0,0,
<<69,82,67,80,12,2,0,0,16,0,0,0,1,0,0,0,255,255,255,
255,255,255,255,255,0,0,0,0,0,0,17,0,6,0,64,0,13,0,
11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,3,68,65,89,0,0,73,79,78,65,76,0,0,2,68,83,69,80,0,
73,79,78,65,76,0,0,12,70,82,65,67,84,73,79,78,65,76,
0,0,4,72,79,85,82,0,73,79,78,65,76,0,0,7,77,73,78,85,
84,69,0,78,65,76,0,0,9,83,69,67,79,78,68,0,78,65,76,
0,0,6,84,83,69,80,0,73,79,78,65,76,0,0,13,84,90,0,82,
0,73,79,78,65,76,0,0,15,84,90,72,0,0,73,79,78,65,76,
0,0,17,84,90,77,0,0,73,79,78,65,76,0,0,1,89,69,65,82,
0,73,79,78,65,76,0,131,1,43,27,85,9,27,94,9,133,0,9,
0,1,93,0,4,7,120,0,9,133,0,7,0,2,44,45,120,0,7,133,0,
9,0,3,93,0,3,7,120,0,9,110,0,0,0,0,1,0,0,0,0,0,16,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,0,9,0,4,
93,0,2,7,120,0,9,146,133,0,27,0,5,133,0,7,0,6,44,58,
120,0,7,133,0,9,0,7,93,0,2,7,120,0,9,120,0,27,146,
133,0,20,0,8,113,0,6,133,0,9,0,9,93,0,2,7,120,0,9,
120,0,20,146,133,0,56,0,10,133,0,38,0,11,110,0,0,0,0,
0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,120,0,38,133,0,7,0,12,95,7,120,0,7,120,0,56,146,
133,0,86,0,13,133,0,7,0,14,29,90,119,0,71,133,0,42,0,
15,110,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,93,0,2,7,120,0,42,146,133,0,19,0,
16,44,58,133,0,9,0,17,93,0,2,7,120,0,9,120,0,19,120,
0,78,120,0,86,85,9,25,85,9,25,120,1,43,0,2,7,120,0,
42,146,133,0,19,0,19,44,58,133>>}},
{week_datetime,
{re_pattern,21,0,0,
<<69,82,67,80,77,2,0,0,16,0,0,0,65,0,0,0,255,255,255,
255,255,255,255,255,0,0,87,0,0,0,21,0,10,0,64,0,13,0,
12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,7,68,65,89,0,0,73,79,78,65,76,0,0,3,68,83,69,80,0,
73,79,78,65,76,0,0,16,70,82,65,67,84,73,79,78,65,76,
0,0,8,72,79,85,82,0,73,79,78,65,76,0,0,11,77,73,78,
85,84,69,0,78,65,76,0,0,13,83,69,67,79,78,68,0,78,65,
76,0,0,10,84,83,69,80,0,73,79,78,65,76,0,0,17,84,90,
0,75,0,73,79,78,65,76,0,0,19,84,90,72,0,0,73,79,78,
65,76,0,0,21,84,90,77,0,0,73,79,78,65,76,0,0,5,87,69,
69,75,0,73,79,78,65,76,0,0,1,89,69,65,82,0,73,79,78,
65,76,0,131,1,81,27,85,9,27,94,9,133,0,9,0,1,93,0,4,
7,120,0,9,133,0,37,0,2,133,0,7,0,3,44,45,120,0,7,133,
0,19,0,4,29,87,133,0,9,0,5,93,0,2,7,120,0,9,120,0,19,
120,0,37,133,0,17,0,6,113,0,3,133,0,6,0,7,7,120,0,6,
120,0,17,110,0,0,0,0,1,0,0,0,0,0,16,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,133,0,9,0,8,93,0,2,7,120,0,
9,146,133,0,27,0,9,133,0,7,0,10,44,58,120,0,7,133,0,
9,0,11,93,0,2,7,120,0,9,120,0,27,146,133,0,20,0,12,
113,0,10,133,0,9,0,13,93,0,2,7,120,0,9,120,0,20,146,
133,0,56,0,14,133,0,38,0,15,110,0,0,0,0,0,80,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,0,38,
133,0,7,0,16,95,7,120,0,7,120,0,56,146,133,0,86,0,17,
133,0,7,0,18,29,90,119,0,71,133,0,42,0,19,110,0,0,0,
0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,93,0,2,7,120,0,42,146,133,0,19,0,20,44,58,133,
0,9,0,21,93,0,2,7,120,0,9,120,0,19,120,0,78,120,0,86,
85,9,25,85,9,25,120,1,81,0,0,0,0,0,0,0,0,3,0,0,0,144,
3,0,0,0,0,0,0,0,0,0,0,89,3,0,0,0>>}},
{calendar_datetime,
{re_pattern,20,0,0,
<<69,82,67,80,70,2,0,0,16,0,0,0,1,0,0,0,255,255,255,
255,255,255,255,255,0,0,0,0,0,0,20,0,9,0,64,0,13,0,
12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,6,68,65,89,0,0,73,79,78,65,76,0,0,3,68,83,69,80,0,
73,79,78,65,76,0,0,15,70,82,65,67,84,73,79,78,65,76,
0,0,7,72,79,85,82,0,0,79,78,65,76,0,0,10,77,73,78,85,
84,69,0,78,65,76,0,0,4,77,79,78,84,72,0,79,78,65,76,
0,0,12,83,69,67,79,78,68,0,78,65,76,0,0,9,84,83,69,
80,0,73,79,78,65,76,0,0,16,84,90,0,82,0,73,79,78,65,
76,0,0,18,84,90,72,0,0,73,79,78,65,76,0,0,20,84,90,
77,0,0,73,79,78,65,76,0,0,1,89,69,65,82,0,73,79,78,
65,76,0,131,1,74,27,85,9,27,94,9,133,0,9,0,1,93,0,4,
7,120,0,9,133,0,27,0,2,133,0,7,0,3,44,45,120,0,7,133,
0,9,0,4,93,0,2,7,120,0,9,120,0,27,133,0,20,0,5,113,0,
3,133,0,9,0,6,93,0,2,7,120,0,9,120,0,20,110,0,0,0,0,
1,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,133,0,9,0,7,93,0,2,7,120,0,9,146,133,0,27,0,8,
133,0,7,0,9,44,58,120,0,7,133,0,9,0,10,93,0,2,7,120,
0,9,120,0,27,146,133,0,20,0,11,113,0,9,133,0,9,0,12,
93,0,2,7,120,0,9,120,0,20,146,133,0,56,0,13,133,0,38,
0,14,110,0,0,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,120,0,38,133,0,7,0,15,95,7,120,
0,7,120,0,56,146,133,0,86,0,16,133,0,7,0,17,29,90,
119,0,71,133,0,42,0,18,110,0,0,0,0,0,40,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,0,2,7,120,
0,42,146,133,0,19,0,19,44,58,133,0,9,0,20,93,0,2,7,
120,0,9,120,0,19,120,0,78,120,0,86,85,9,25,85,9,25,
120,1,74,0,85,9,25,120,1,81,0,0,0,0,0,0,0,0,3,0,0,0,
144,3,0,0,0,0,0,0,0,0>>}},
{timezone,
{re_pattern,5,0,0,
<<69,82,67,80,184,0,0,0,16,0,0,0,1,0,0,0,255,255,255,
255,255,255,255,255,0,0,0,0,0,0,5,0,0,0,64,0,6,0,3,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
1,84,90,0,0,0,3,84,90,72,0,0,5,84,90,77,0,131,0,98,
27,94,9,133,0,86,0,1,133,0,7,0,2,29,90,119,0,71,133,
0,42,0,3,110,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,93,0,2,7,120,0,42,146,133,
0,19,0,4,44,58,133,0,9,0,5,93,0,2,7,120,0,9,120,0,
19,120,0,78,120,0,86,85,9,25,120,0,98,0>>}}].



%% @private
to_bin(K) when is_binary(K) -> K;
to_bin(K) -> nklib_util:to_binary(K).


%% ===================================================================
%% EUnit tests
%% ===================================================================

-define(TEST, 1).
-ifdef(TEST).
-include_lib("eunit/include/eunit.hrl").


dates_test() ->
    G1971 = nklib_util:gmt_to_timestamp({{1971, 1, 1}, {0,0,0}}),
    G1980 = nklib_util:gmt_to_timestamp({{1980, 1, 1}, {0,0,0}}),
    G2018 = nklib_util:gmt_to_timestamp({{2018, 1, 1}, {0,0,0}}),
    G2100 = nklib_util:gmt_to_timestamp({{2100, 1, 1}, {0,0,0}}),

    {ok, <<"1971-01-01T00:00:00Z">>} = to_3339(G1971),
    {ok, <<"1971-01-01T00:00:00.001Z">>} = to_3339(G1971 * 1000 + 1),
    {ok, <<"1971-01-01T00:00:00.000001Z">>} = to_3339(G1971 * 1000 * 1000 + 1),

    {ok, <<"1980-01-01T00:00:00Z">>} = to_3339(G1980),
    {ok, <<"1980-01-01T00:00:00.001Z">>} = to_3339(G1980 * 1000 + 1),
    {ok, <<"1980-01-01T00:00:00.000001Z">>} = to_3339(G1980 * 1000 * 1000 + 1),

    {ok, <<"2018-01-01T00:00:00Z">>} = to_3339(G2018),
    {ok, <<"2018-01-01T00:00:00.001Z">>} = to_3339(G2018 * 1000 +  1),
    {ok, <<"2018-01-01T00:00:00.000001Z">>} = to_3339(G2018 * 1000 * 1000 + 1),

    {ok, <<"2100-01-01T00:00:00Z">>} = to_3339(G2100),
    {ok, <<"2100-01-01T00:00:00.001Z">>} = to_3339(G2100 * 1000 + 1),
    {ok, <<"2100-01-01T00:00:00.000001Z">>} = to_3339(G2100 * 1000 * 1000 + 1),

    {ok, <<"1980-01-01T00:00:00Z">>} = to_3339("1980-01-01T00:00:00Z"),
    {ok, <<"1980-01-01T00:00:00.001Z">>} = to_3339("1980-01-01T00:00:00.001Z"),
    {ok, <<"1980-01-01T00:00:00.000001Z">>} = to_3339("1980-01-01T00:00:00.000001Z"),


    {ok,{2015,6,30,23,59,10,0.0,0}} = quick_3339("2015-06-30T23:59:10Z"),
    {ok,{2015,6,30,23,59,10,0.1,1}} = quick_3339("2015-06-30T23:59:10.1Z"),
    {ok,{2015,6,30,23,59,10,0.01,2}} = quick_3339("2015-06-30T23:59:10.01Z"),
    {ok,{2015,6,30,23,59,10,0.001,3}} = quick_3339("2015-06-30T23:59:10.001Z"),
    {ok,{2015,6,30,23,59,10,0.0001,4}} = quick_3339("2015-06-30T23:59:10.0001Z"),

    1435708750 = nklib_util:gmt_to_timestamp({{2015,6,30},{23,59,10}}),

    {ok,1435708750} = to_epoch("2015-06-30T23:59:10Z", secs),
    {ok,1435708750000} = to_epoch("2015-06-30T23:59:10Z", msecs),
    {ok,1435708750000000} = to_epoch("2015-06-30T23:59:10Z", usecs),

    {ok,1435708750} = to_epoch("2015-06-30T23:59:10.1Z", secs),
    {ok,1435708750100} = to_epoch("2015-06-30T23:59:10.1Z", msecs),
    {ok,1435708750100000} = to_epoch("2015-06-30T23:59:10.1Z", usecs),

    {ok,1435708750} = to_epoch("2015-06-30T23:59:10.01Z", secs),
    {ok,1435708750010} = to_epoch("2015-06-30T23:59:10.01Z", msecs),
    {ok,1435708750010000} = to_epoch("2015-06-30T23:59:10.01Z", usecs),

    {ok,1435708750} = quick_epoch("2015-06-30T23:59:10.001Z", secs),
    {ok,1435708750001} = quick_epoch("2015-06-30T23:59:10.001Z", msecs),
    {ok,1435708750001000} = quick_epoch("2015-06-30T23:59:10.001Z", usecs),

    {ok,1435708750} = quick_epoch("2015-06-30T23:59:10Z", secs),
    {ok,1435708750000} = quick_epoch("2015-06-30T23:59:10Z", msecs),
    {ok,1435708750000000} = quick_epoch("2015-06-30T23:59:10Z", usecs),

    {ok,1435708750} = quick_epoch("2015-06-30T23:59:10.1Z", secs),
    {ok,1435708750100} = quick_epoch("2015-06-30T23:59:10.1Z", msecs),
    {ok,1435708750100000} = quick_epoch("2015-06-30T23:59:10.1Z", usecs),

    {ok,1435708750} = quick_epoch("2015-06-30T23:59:10.01Z", secs),
    {ok,1435708750010} = quick_epoch("2015-06-30T23:59:10.01Z", msecs),
    {ok,1435708750010000} = quick_epoch("2015-06-30T23:59:10.01Z", usecs),

    {ok,1435708750} = quick_epoch("2015-06-30T23:59:10.001Z", secs),
    {ok,1435708750001} = quick_epoch("2015-06-30T23:59:10.001Z", msecs),
    {ok,1435708750001000} = quick_epoch("2015-06-30T23:59:10.001Z", usecs),

    ok.


-endif.




